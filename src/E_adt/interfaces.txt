Records, classes, abstract classes, and interfaces are mechanisms
for defining new types.

A type consists of:
- specification: a type's name, method headers, and Javadoc comments.
- implementation: instance fields and method bodies.

A record, class, or abstract class combines specification and
implementation into a single unit.

By contrast, an interface usually consists of just specification.
It can have a limited form of implementation as well, as we'll see.
So an interface is a type specification with basically no implementation.

Interfaces are somewhat similar to abstract classes.
The following are the main differences between them:
1. An interface cannot have state (= instance fields); an abstract class can.
2. A class cannot directly extend multiple abstract classes,
   but a class can directly inherit from multiple interfaces.
   E.g., this is ok: class C implements Interface1, Interface2 {}
   But not: class C extends ClassA, ClassB {}

In older versions of Java, there was another important difference:  unlike an
abstract class, which may contain a mixture of abstract and non-abstract methods,
all interface methods had to be abstract. But since Java 8, interfaces can
contain all kinds of methods.

Here are more details about the differences between abstract classes and interfaces.
1. An interface cannot have instance fields or constructors. But a class,
   even an abstract one, can have instance fields and constructors.
2. A class can directly inherit from multiple interfaces. But a class
   cannot directly inherit from multiple classes, even if they are abstract.
   Example:
   abstract class A1 {}
   abstract class A2 {}
   interface I1 {}
   interface I2 {}
   class C extends A1, A2 {} // illegal
   class C implements I1, I2 {} // legal and common
   class C extends A1 implements I1, I2 {} // also legal
3. In an interface, methods are implicitly public unless marked as private.
   In a class, methods are not public by default; instead they are package-private.
4. In an interface, instance methods are implicitly abstract, unless marked
   as "default". In an abstract class, instance methods are implicitly
   non-abstract, unless marked as abstract.
5. In an interface, all fields are implicitly public static final. This is not
   the case in a class.
5. Before Java 8, interfaces were not allowed to have non-abstract methods, while
   classes, even abstract ones, could. Nowadays, however, interfaces can contain
   non-abstract methods, whether static or instance.

Question: Why does Java not allow a class to directly extend multiple classes,
even if they are abstract?

Answer: This is known as multiple inheritance of state. If it was allowed, we
might have the following confusing situation:
abstract class A1 { int x = 10; }
abstract class A2 { int x = 20; }
class C extends A1, A2 {} // illegal
The problem is: which x does C inherit? Some languages allow multiple inheritance
of state, and they have complicated rules about it. The designers of Java wanted
to avoid this complication (and others), so they forbade extending multiple classes
at the same time.

Question: Why does Java allow a class to directly implement multiple interfaces?

Answer: Since interfaces cannot contain instance fields, we don't have the issue
described above.

Question: Now that Java allows an interface to contain non-abstract ("default")
methods, what happens if a class inherits a default method from two interfaces?
Answer: If this rare event occurs, the class is required by the compiler to
override the method. Example:
interface I1 {
    default void m() {
        System.out.println("hello");
    }
}
interface I2 {
    default void m() {
        System.out.println("goodbye");
    }
}
class C implements I1, I2 { // legal
    @Override
    public default void m() {
        System.out.println("whatever");
    }
}
C inherits two implementations of m(), so it must override the method.

Question: What happens if a class C1 inherits a method from both another class C2
and an interface I?

Answer: C2's version of the method wins, unless C2 overrides it.